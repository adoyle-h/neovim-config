snippet shabang "[shell] Add shabang" b
#!/usr/bin/env ${1:bash}
# shellcheck disable=${2:SC1090}

${0}
endsnippet

snippet shellcheck-disable "Default shellcheck disables options" b
# shellcheck disable=${1:SC1090}${0}
endsnippet

snippet SCRIPT_DIR "[shell] Add SCRIPT_DIR variable" b
readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "\$0")" && pwd -P)"
endsnippet

snippet script_dir "[shell] Add SCRIPT_DIR variable" b
readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "\$0")" && pwd -P)"
endsnippet

snippet sh-vars "[shell] Add magic shell variables" b
readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "\$0")" && pwd -P)"
readonly SCRIPT_BASENAME="$(basename "\$0")"
readonly SCRIPT_PATH="${SCRIPT_DIR}/$SCRIPT_BASENAME"

readonly ARGS="$@"
readonly ARG1="\${1:-}"
endsnippet

snippet bash "Add bash shabang and set variables" b
#!/usr/bin/env ${1:bash}
# shellcheck disable=${2:SC1090}

set -o errexit
set -o nounset
set -o pipefail
[[ -n "${XTRACE:+x}" ]] && set -o xtrace
[[ -n "${VERBOSE:+x}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false
[[ $- =~ [x] ]] && PS4='+[${BASH_SOURCE[0]}:${LINENO}|${FUNCNAME[0]:+${FUNCNAME[0]}}()|$?${XTRACE_PIPE:+|${PIPESTATUS[*]}}]: '
endsnippet


snippet bash_program "Add bash program template" b
#!/usr/bin/env bash
#
# Filename:
# Description:
# Author: ADoyle <adoyle.h@gmail.com>
# LICENSE: Apache License, Version 2.0
# First Created: 2017-07-26T07:13:55Z
# Last Modified: 2017-07-26T17:32:16Z
# Version: 0.1.0
# Bash Version: 4.x
# Source:
# Project:

# shellcheck disable=${1:SC1090,SC2155}
set -o errexit
set -o errtrace
set -o nounset
set -o pipefail
[[ -n "${XTRACE:+x}" ]] && set -o xtrace
[[ -n "${VERBOSE:+x}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false
[[ $- =~ [x] ]] && PS4='+[${BASH_SOURCE[0]}:${LINENO}|${FUNCNAME[0]:+${FUNCNAME[0]}}()|$?${XTRACE_PIPE:+|${PIPESTATUS[*]}}]: '

#######################################################################
#                           initialization                            #
#######################################################################

usage() {
cat <<EOF
Usage: \$0 [Options] <required> [optional]

Options:
    -h --help               Show help

Parameters:
    <required>
    <optional>
EOF
}


declare -A dispatch_cmd_opts
declare -a dispatch_cmd_args

opt_parse() {
  while [ $# -gt 0 ];do
    case \$1 in
      -i)
        dispatch_cmd_opts[input]=\$2
        shift
        ;;
      --input)
        dispatch_cmd_opts[input]=\$2
        shift
        ;;
      -h)
        dispatch_cmd_opts[help]=true
        ;;
      --help)
        dispatch_cmd_opts[help]=true
        ;;
      *)
        dispatch_cmd_args+=("\$1")
        ;;
    esac
    shift
  done

  # declare -p dispatch_cmd_opts
}

#######################################################################
#                           private methods                           #
#######################################################################


#######################################################################
#                           public methods                            #
#######################################################################

${2:main}() {
  opt_parse "$@"
  local arg0=${dispatch_cmd_args[0]:-}

  if [[ ${dispatch_cmd_opts[help]:-} == true ]] || [[ -z "$arg0" ]]; then
    usage
    exit 0
  fi
}

$2 "\$@"
endsnippet
