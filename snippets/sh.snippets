priority 100

snippet shellcheck-sh "Specify the shell for a script"
  # shellcheck shell=${1:sh}

snippet shellcheck-bash "Specify the shell for a script"
  # shellcheck shell=${1:bash}

snippet shellcheck-disable "shellcheck disable=" b
  # shellcheck disable=${1:SC1090}${0}

snippet shellcheck-source "shellcheck source=" b
  # shellcheck source=${0}

snippet shellcheck-path "shellcheck source-path=" b
  # shellcheck source-path=SCRIPTDIR

snippet SCRIPT_DIR "[shell] Add SCRIPT_DIR variable" b
  SCRIPT_DIR="$(cd -P -- "$(dirname -- "\$0")" && pwd -P)"
  readonly SCRIPT_DIR

snippet script_dir "[shell] Add SCRIPT_DIR variable (for command entry)" b
  readlinkf() { # Modified from https://github.com/ko1nksm/readlinkf
    [ "\${1:-}" ] || return 1

    CDPATH='' # to avoid changing to an unexpected directory
    local max_symlinks=40
    local link
    local target=\$1

    [ -e "\${target%/}" ] || target=\${1%"\${1##*[!/]}"} # trim trailing slashes
    [ -d "\${target:-/}" ] && target="\$target/"

    cd -P . 2>/dev/null || return 1
    while [ "\$max_symlinks" -ge 0 ] && max_symlinks=\$((max_symlinks - 1)); do
      if [ ! "\$target" = "\${target%/*}" ]; then
        case \$target in
          /*) cd -P "\${target%/*}/" 2>/dev/null || break ;;
          *) cd -P "./\${target%/*}" 2>/dev/null || break ;;
        esac
        target=\${target##*/}
      fi

      if [ ! -L "\$target" ]; then
        target="\${PWD%/}\${target:+/}\${target}"
        printf '%s\n' "\${target:-/}"
        return 0
      fi

      link=\$(ls -dl -- "\$target" 2>/dev/null) || break
      target=\${link#*" \$target -> "}
    done
    return 1
  }

  SCRIPT_PATH="\$(readlinkf "\$0")"
  SCRIPT_DIR=\$(dirname "\$SCRIPT_PATH")
  readonly SCRIPT_PATH SCRIPT_DIR

snippet sh-vars "[shell] Add magic shell variables" b
  SCRIPT_DIR="$(cd -P -- "$(dirname -- "\$0")" && pwd -P)"
  SCRIPT_BASENAME="$(basename "\$0")"
  readonly SCRIPT_DIR SCRIPT_BASENAME
  readonly SCRIPT_PATH="${SCRIPT_DIR}/$SCRIPT_BASENAME"
  readonly ARGS="$@"
  readonly ARG1="\${1:-}"

snippet bash "Add bash shabang and set options" b
  #!/usr/bin/env bash

  set -o errexit -o nounset -o pipefail -o errtrace
  (shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

snippet bash-opts "Add bash options" b
  set -o errexit -o nounset -o pipefail -o errtrace
  (shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

snippet bash_program "Add bash program template" b
  #!/usr/bin/env bash
  #
  # Filename:
  # Description:
  # Author: ADoyle <adoyle.h@gmail.com>
  # LICENSE: Apache License, Version 2.0
  # First Created: 2017-07-26T07:13:55Z
  # Last Modified: 2017-07-26T17:32:16Z
  # Version: 0.1.0
  # Bash Version: 4.x
  # Source:
  # Project:

  set -o errexit -o nounset -o pipefail -o errtrace
  (shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

  #######################################################################
  #                           initialization                            #
  #######################################################################

  usage() {
  cat <<EOF
  Usage: \$0 [Options] <required> [optional]

  Options:
      -h --help               Show help

  Parameters:
      <required>
      <optional>
  EOF
  }


  declare -A dispatch_cmd_opts
  declare -a dispatch_cmd_args

  opt_parse() {
    while [ $# -gt 0 ];do
      case \$1 in
        -i)
          dispatch_cmd_opts[input]=\$2
          shift
          ;;
        --input)
          dispatch_cmd_opts[input]=\$2
          shift
          ;;
        -h)
          dispatch_cmd_opts[help]=true
          ;;
        --help)
          dispatch_cmd_opts[help]=true
          ;;
        *)
          dispatch_cmd_args+=("\$1")
          ;;
      esac
      shift
    done

    # declare -p dispatch_cmd_opts
  }

  #######################################################################
  #                           private methods                           #
  #######################################################################


  #######################################################################
  #                           public methods                            #
  #######################################################################

  ${2:main}() {
    opt_parse "$@"
    local arg0=${dispatch_cmd_args[0]:-}

    if [[ ${dispatch_cmd_opts[help]:-} == true ]] || [[ -z "$arg0" ]]; then
      usage
      exit 0
    fi
  }

  $2 "\$@"

snippet l.parse_params "[lobash] parse_params" b
  declare -A opts=()
  declare -a args=()
  l.parse_params opts args "$@"
  $0

snippet one:usage "one.bash:usage (3)" b
  # one.bash:usage
  if (( \$# == 0 )) || [[ \$1 == -h ]] || [[ \$1 == --help ]]; then
    cat <<EOF
  Usage: \$ONE_SUB \$(basename "\$0")
  Desc: $0
  Arguments:
  Options:
  EOF
    exit 0
  fi

snippet one:usage2 "one.bash:usage (2)" b
  # one.bash:usage
  if [[ \${1:-} == -h ]] || [[ \${1:-} == --help ]]; then
    cat <<EOF
  Usage: \$ONE_SUB \$(basename "\$0")
  Desc: $0
  Arguments:
  Options:
  EOF
    exit 0
  fi

snippet one:usage3 "one.bash:usage with actions" b
  usage() {
    local cmd; cmd=\$(basename "\$0");
    cat <<EOF
  Usage:  one \$cmd <ACTION> [--help]
          one \$cmd [-h|--help]
          one \$cmd <-h|--help> <ACTION>

  Desc:   description

  ACTION:
    action          description
  EOF
    exit 0
  }

  usage_action() {
    local cmd; cmd=\$(basename "\$0");
    cat <<EOF
  Usage: one \$cmd action
  Desc:  description
  EOF
    exit 0
  }
  usage_a() { usage_action; }

  # one.bash:usage
  if (( \$# == 0 )) then
    usage;
  elif [[ \$1 == -h ]] || [[ \$1 == --help ]]; then
    if (( \$# > 1 )); then "usage_\$2"; else usage; fi
  elif [[ \${*: -1} == --help ]] ; then
    if (( \$# > 1 )); then "usage_\$1"; else usage; fi
  fi

snippet one:completion "one.bash:completion" b
  # one.bash:completion
  if [[ "\${1:-}" == --complete ]]; then
    if (( COMP_CWORD < 3 )); then
      result=\$(compgen -f -- "\$2")
      if [[ -d \$result ]]; then
        compgen -f -- "\$result/"
      else
        echo "\${result[@]}"
      fi
    fi
    exit 0
  fi
